Progress:
Saturday night, May 14th. 8:30 into project. Got create route working to db, redux store set up simply but not in use yet.

Sunday 15th:

(6:00)
1. Wired up redux store (lots of learning here.)
2. Created the modal for managing events. (I hope this was tonight and not yesterday.)
3. Got /read route working from DB.
*4. Restructured the directory to be less deep. Learning/developing best practices time here too. (0:45?)

Monday 16th:

*1. Reworked form to host update as well as create, and button to handle dynamic actions.(4:00)
Also added myEvent reducer to redux store.
Spent a lot of time learning ins and outs of redux and socket.io.

Tuesday 17th:
1. Got update route working (0:30) V
2. Added cancel button to modal (0:30) V
3. Added a modal container component (0:30) V
4. Added a reusable submit button component (0:30) V
*5. reworked redux store to include mode, learned to use setDispatchToProps (5:00) V

Wednesday 18th:

1. Got /events functioning properly (0:45) V
*2. Restructure the /events folder (0:20) V
3. Add form validation (1:30)
4. Create a capitalize /util function (0:05) V

Thursday 19th:
1. Continue form validation (1:30)


Sunday 20th: (6:30)
1. Finish data validation and error handling in /events V
2. Added notes field and switch content to place V
3. Implemented moment.js: no need to convert to timestamps, moment.js can compare dates in regular format. V
4. got EventList component working, which completes /index (1:30) V

Monday 21st: (0:30)
*1. reworked inputs on /profile form (0:30)

Tuesday 22nd: (6:30)
*1. Reworked /events submit modal to present 4 slides instead of 1. (5:30) V
*2. Recreated the /events delete modal. (1:00) V

Wednesday 23rd: (3:45)
1. Learned how to embed and use google maps, markers, and geocoding in an html file (2:30) V
2. Planned geolocation use in app (1:00) V
3. /events only show available actions; remove reject modals (0:15) V
4. /index change wording to 'my event' V

Thursday 24th: (5:00)

1. Make location the 3rd slide. (0:15) V
2. Cleaned up minor bugs in /events, removed console.logs (1:00) V
3. Implement Google Maps in slide 3 (3:45) ...learned how to do everything I need to, now just need to get it all working.

Friday 25th: (2:30)

1. Create geocoding file (0:20) V
2. Get self geolocation working (2:10)

Saturday 26th (8:15)

1. Get self geolocation working (1:00) V
2. Build reducer for location and implement so that map shows user location to start (1:00) V
3. Implement backup for self geolocation fail (3:00) V
4. Create address bar and make it and the map inter-responsive (3:15) V

Sunday 27th (1:30)

1. Slide 3 and /events creation modal now add the current event to redux state. (0:45) V
2. Rework the map to load with USA then switch to their location if it loads. (0:05) V
3. Display the current event in myEvent and add it to the Events db. (0:10) V
4. Began reworking /profile form to show info not as editable, but with link to change (0:30)

Monday 28th (6:35)

1. Get sign up working, validating input and generating errors (3:45) V
2. Set up /user crud ops (0:20) V
3. Set up /user routes on the server (0:30) V
4. Write new users to the database (1:00) V
5. Be able to view user info in the profile page. (1:00)

**I don't think I'm emitting events from the server properly. This is the second issue I've had doing it.
**Solved it! I need to declare one client-side socket for the application, not for each page!!

Tuesday 29th (4:30)
1. Be able to view user info in the profile page. (1:20) V
2. Persist myEvent across the app, not just the page (0:30) V
3. Got profile/change age range and delete profile buttons working (1:40) V
4. Get reset password working (1:00)

Wednesday 30th (3:15)
1. Get reset password working (0:20) V
2. Get reset email working (0:10) V
3. Have events in /index show a modal with details on a button click (0:45) V
4. Set db models up to take the more interactive data (0:15) V
5. Set up login (1:45) V

Thursday 31st (2:45)
1. Add createdBy field to events (0:40) V
2. Clean up bits and pieces, get createdBy rendering in /index page (1:00) V
3. Planning (0:20) V
4. Reorganized crud (0:05) V
5. Wire up join events in /index (0:40)

Friday 1st (1:20)
1. Wire up join events in /index (1:20)

Saturday 2nd (2:30)
1. Wire up join events in /index, including unjoin (1:30) V
2. Clean up a few bugs (0:30) V
3. Get myEvent persisting between logins (0:30)

Sunday 3rd (0:15)
1. Get myEvent persisting between logins (0:15)

Monday 4th (9:30)
1. Worked on getting join and unjoin working. Didn't finish. Learned a lot about async stuff.
2. Made a loadState function that enables persisting session data

Tuesday 5th (1:30)
1. Solve the join and unjoin problem (0:10) V I love figuring things out at random non-programming times.
2. Refactor unjoin calls to be more readable and get loadState on all pages (0:20) V
3. Add event location to user's meetingPlaces on create or update event (0:15)
4. Get sidetracked by the organization of the db, begin reworking it (0:30)
5. Can reorganization of the db, finish #3 (0:20) V


Wednesday 6th (1:00)
1. Rework organization of the db - sidetracked by need for a test suite (0:30)
2. Work on Jest server-side suite (0:30)

Thursday 7th (3:00)
1. Work on Jest server-side suite (3:00) - fighting with a db problem that turned out to be an async problem.

~away in Missouri for weekend, very busy~

Tuesday 12th
1. Solve problem (1:00) V

Wednesday 13th (7:30)
1. Work on Jest server-side suite:
 a) user crud ops V (5:00)
 b) user.attendingEvents crud ops V (2:30)

Thursday 14th (5:30)
1. Work on Jest server-side suite:
 a) user.hostedEvents, user.homeLocations, user.MeetingPlaces (1:00) V
 b) events crud ops (3:30) V
 c) events.attendees crud ops (1:00)

Friday 15th 3:00
1. events.attendees crud ops (0:20) V
2. turn seed data into a class and create instances so tests don't overrun each other (0:20) V
~Back-end Test Suite Finished. :)

3. 




Next steps:

I need to get new events being pushed to the screen with sockets. They get added to the db immediately - just need to broadcast these to redux state for all users.


3. Get cleanup for old events
5. If user's location is available, show distance to events. Might have to ask for location, user has to search, if it's not available.

Further features:
1. Implement flags
2. Implement questions and answers, forum style

So, going forward - just the websocket issue for now. I'll leave that till later as a minor bug.
Got this figured out - one socket per app! :)
